<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommunityToolkit.Extensions.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute">
            <summary>
            <para>
            An attribute that can be used to instruct the generator to add a singleton service to the target <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.
            </para>
            <para>
            This attribute should be added to a <see langword="partial"/> method receiving an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            instance, and the generator will register all requested services (optionally also returning the input object).
            </para>
            <para>
            That is, given a declaration as follows:
            <code>
            [Singleton(typeof(MyServiceA), typeof(IMyServiceA))]
            [Singleton(typeof(MyServiceB), typeof(IMyServiceB))]
            [Singleton(typeof(MyServiceC), typeof(IMyServiceC))]
            private static partial void ConfigureServices(IServiceCollection services);
            </code>
            The generator will produce code as follows:
            <code>
            private static partial void ConfigureServices(IServiceCollection services)
            {
                services.AddSingleton(typeof(IMyServiceA), static services => new MyServiceA());
                services.AddSingleton(typeof(IMyServiceB), static services => new MyServiceB(
                    services.GetRequiredServices&lt;IMyServiceA&gt;()));
                services.AddSingleton(typeof(IMyServiceC), static services => new MyServiceC(
                    services.GetRequiredServices&lt;IMyServiceA&gt;(),
                    services.GetRequiredServices&lt;IMyServiceB&gt;()));
            }
            </code>
            </para>
            </summary>
            <remarks>
            This attribute is conditional for two reasons:
            <list type="bullet">
              <item>
                Since the attributes are only used for source generation and there can be a large number of them, this
                reduces the metadata impact on the final assemblies. If needed, the directive can be manually defined.
              </item>
              <item>
                The attributes have a constructor parameter of an array type, which is not allowed in WinRT assemblies.
                Making the attributes conditional makes Roslyn skip emitting them, which avoids WinMDExp generating an
                invalid PE file and then causing projects referencing it to fail to build. For more info on the WinMDExp
                issue, see <see href="https://developercommunity.visualstudio.com/t/MSBuild:-OutOfMemoryException:-Task-Gen/10270567?"/>.
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute"/> instance with the specified parameters.
            </summary>
            <param name="implementationType">The implementation type for the service.</param>
            <param name="serviceTypes">The service types to register for the provided implementation.</param>
        </member>
        <member name="P:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute.ImplementationType">
            <summary>
            Gets the implementation type for the service to register.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute.ServiceTypes">
            <summary>
            Gets the supported service types for the implementation being registered.
            </summary>
        </member>
        <member name="T:CommunityToolkit.Extensions.DependencyInjection.TransientAttribute">
            <summary>
            <para>
            An attribute that can be used to instruct the generator to add a transient service to the input <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.
            </para>
            <para>
            This attribute can be used in the same way as <see cref="T:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute"/>, the only difference being that it will register transient services.
            A method can be annotated with any combination of <see cref="T:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute"/> and <see cref="T:CommunityToolkit.Extensions.DependencyInjection.TransientAttribute"/>.
            </para>
            </summary>
            <remarks>For more info, see <seealso cref="T:CommunityToolkit.Extensions.DependencyInjection.SingletonAttribute"/>.</remarks>
        </member>
        <member name="M:CommunityToolkit.Extensions.DependencyInjection.TransientAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Extensions.DependencyInjection.TransientAttribute"/> instance with the specified parameters.
            </summary>
            <param name="implementationType">The implementation type for the service.</param>
            <param name="serviceTypes">The service types to register for the provided implementation.</param>
        </member>
        <member name="P:CommunityToolkit.Extensions.DependencyInjection.TransientAttribute.ImplementationType">
            <summary>
            Gets the implementation type for the service to register.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Extensions.DependencyInjection.TransientAttribute.ServiceTypes">
            <summary>
            Gets the supported service types for the implementation being registered.
            </summary>
        </member>
    </members>
</doc>
